require("dotenv").config({ path: "../.env" });

const express = require("express");
const cors = require("cors");
const bodyParser = require("body-parser");
const { Telegraf } = require("telegraf");
const multer = require("multer"); // –î–ª—è —Ä–∞–±–æ—Ç—ã —Å multipart/form-data
const fs = require("fs");
const path = require("path");

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    const uploadsDir = path.join(__dirname, "uploads");
    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!fs.existsSync(uploadsDir)) {
      fs.mkdirSync(uploadsDir, { recursive: true });
    }
    cb(null, uploadsDir);
  },
  filename: function (req, file, cb) {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    const uniqueSuffix = Date.now() + "-" + Math.round(Math.random() * 1e9);
    cb(
      null,
      file.fieldname + "-" + uniqueSuffix + path.extname(file.originalname)
    );
  },
});

const upload = multer({ storage: storage });

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Express
const app = express();
app.use(cors());
app.use(bodyParser.json());

// –î–µ–ª–∞–µ–º –ø–∞–ø–∫—É uploads –¥–æ—Å—Ç—É–ø–Ω–æ–π —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏
app.use("/uploads", express.static(path.join(__dirname, "uploads")));

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ Telegram
const bot = new Telegraf(
  process.env.REACT_APP_TELEGRAM_BOT_TOKEN ||
    "8069414293:AAEGla5PH-mDwCitWkUEs4_PRFFD_X2LK_I"
);

// –ó–∞–º–µ–Ω–∏—Ç–µ –∑–∞–≥–ª—É—à–∫—É –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
const ADMIN_CHAT_ID = "750638552";

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
const availableSlots = {};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.start((ctx) => {
  ctx.reply(
    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç EllinPrincess! –Ø –ø–æ–º–æ–≥—É –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–∫–∞–∑–∞–º–∏ –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º."
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
bot.help((ctx) => {
  ctx.reply(`
–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:
/slots - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–Ω—è—Ç—ã–µ —Å–ª–æ—Ç—ã
/addslot - –î–æ–±–∞–≤–∏—Ç—å –∑–∞–Ω—è—Ç—ã–π —Å–ª–æ—Ç (—Ñ–æ—Ä–º–∞—Ç: /addslot YYYY-MM-DD HH:MM)
/removeslot - –û—Å–≤–æ–±–æ–¥–∏—Ç—å —Å–ª–æ—Ç (—Ñ–æ—Ä–º–∞—Ç: /removeslot YYYY-MM-DD HH:MM)
  `);
});

// –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–Ω—è—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤
bot.command("slots", (ctx) => {
  const slots = Object.entries(availableSlots);

  if (slots.length === 0) {
    return ctx.reply("–ù–µ—Ç –∑–∞–Ω—è—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤.");
  }

  const message = slots
    .map(([date, times]) => {
      return `üìÖ ${date}: ${times.join(", ")}`;
    })
    .join("\n");

  ctx.reply(`–ó–∞–Ω—è—Ç—ã–µ —Å–ª–æ—Ç—ã:\n${message}`);
});

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–Ω—è—Ç–æ–≥–æ —Å–ª–æ—Ç–∞
bot.command("addslot", (ctx) => {
  const args = ctx.message.text.split(" ").slice(1);

  if (args.length !== 2) {
    return ctx.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /addslot YYYY-MM-DD HH:MM");
  }

  const [date, time] = args;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
  if (!/^\d{4}-\d{2}-\d{2}$/.test(date) || !/^\d{2}:\d{2}$/.test(time)) {
    return ctx.reply(
      "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: YYYY-MM-DD HH:MM"
    );
  }

  if (!availableSlots[date]) {
    availableSlots[date] = [];
  }

  if (availableSlots[date].includes(time)) {
    return ctx.reply(`–°–ª–æ—Ç ${date} ${time} —É–∂–µ –∑–∞–Ω—è—Ç.`);
  }

  availableSlots[date].push(time);
  ctx.reply(`–°–ª–æ—Ç ${date} ${time} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –∑–∞–Ω—è—Ç—ã–π.`);
});

// –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Å–ª–æ—Ç–∞
bot.command("removeslot", (ctx) => {
  const args = ctx.message.text.split(" ").slice(1);

  if (args.length !== 2) {
    return ctx.reply(
      "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /removeslot YYYY-MM-DD HH:MM"
    );
  }

  const [date, time] = args;

  if (!availableSlots[date] || !availableSlots[date].includes(time)) {
    return ctx.reply(`–°–ª–æ—Ç ${date} ${time} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ —Å–≤–æ–±–æ–¥–µ–Ω.`);
  }

  availableSlots[date] = availableSlots[date].filter((t) => t !== time);

  if (availableSlots[date].length === 0) {
    delete availableSlots[date];
  }

  ctx.reply(`–°–ª–æ—Ç ${date} ${time} —Ç–µ–ø–µ—Ä—å —Å–≤–æ–±–æ–¥–µ–Ω.`);
});

// API —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
app.get("/api/slots/:date", (req, res) => {
  const { date } = req.params;
  const allPossibleSlots = [
    "10:00",
    "12:00",
    "14:00",
    "16:00",
    "18:00",
    "20:00",
  ];

  if (!availableSlots[date]) {
    return res.json({ availableSlots: allPossibleSlots });
  }

  const freeSlots = allPossibleSlots.filter(
    (time) => !availableSlots[date].includes(time)
  );
  res.json({ availableSlots: freeSlots });
});

// API —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ —Å —Ñ–∞–π–ª–æ–º
app.post("/api/orders", upload.single("screenshot"), async (req, res) => {
  try {
    const {
      serviceId,
      serviceName,
      price,
      name,
      telegramUsername,
      date,
      time,
    } = req.body;

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    let messageText = `
üîî <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!</b>

<b>–£—Å–ª—É–≥–∞:</b> ${serviceName} (ID: ${serviceId})
<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> ${price} ‚ÇΩ
<b>–ö–ª–∏–µ–Ω—Ç:</b> ${name}
<b>Telegram:</b> ${telegramUsername}
<b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b> ${date} –≤ ${time}
    `;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await bot.telegram.sendMessage(
      process.env.ADMIN_CHAT_ID || ADMIN_CHAT_ID,
      messageText,
      { parse_mode: "HTML" }
    );

    // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
    if (req.file) {
      const filePath = req.file.path;
      await bot.telegram.sendPhoto(
        process.env.ADMIN_CHAT_ID || ADMIN_CHAT_ID,
        { source: filePath },
        { caption: "–°–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã" }
      );
    }

    // –ü–æ–º–µ—á–∞–µ–º —Å–ª–æ—Ç –∫–∞–∫ –∑–∞–Ω—è—Ç—ã–π
    if (!availableSlots[date]) {
      availableSlots[date] = [];
    }

    if (!availableSlots[date].includes(time)) {
      availableSlots[date].push(time);
    }

    res.status(200).json({ success: true, message: "–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω" });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:", error);
    res
      .status(500)
      .json({ success: false, message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞" });
  }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.BOT_PORT || 3001;
app.listen(PORT, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot
  .launch()
  .then(() => console.log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω"))
  .catch((err) => console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:", err));

// –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–µ—Ä–≤–µ—Ä–∞
process.once("SIGINT", () => bot.stop("SIGINT"));
process.once("SIGTERM", () => bot.stop("SIGTERM"));
